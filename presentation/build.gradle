apply plugin: 'com.android.library'
apply plugin: 'kotlin-platform-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.gluehome.common-android'

android {
    compileSdkVersion Versions.compile_sdk
    buildToolsVersion Versions.build_tools

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen {
                false
            }
            showStandardStreams = true
        }
    }

    defaultConfig {
        minSdkVersion Versions.min_sdk
        targetSdkVersion Versions.target_sdk
    }

    buildTypes {
        debug {}
        release {}
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main.java.srcDirs += [file("$buildDir/generated/source/kapt/main")]
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    lintOptions {
        abortOnError false
        xmlReport true
    }
}

dependencies {

    implementation project(':domain')
    implementation project(':logger')

    // core
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${Versions.kotlin}"
    implementation 'androidx.core:core-ktx:1.0.1'

    // rx
    api 'io.reactivex.rxjava2:rxandroid:2.1.0'

    // dagger
    implementation 'com.google.dagger:dagger:2.18'
    kapt 'com.google.dagger:dagger-compiler:2.18'

    // design + compat
    implementation 'androidx.appcompat:appcompat:1.0.2'

    // arch components
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    kapt 'androidx.lifecycle:lifecycle-compiler:2.0.0'

    // UI
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.browser:browser:1.0.0'
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
